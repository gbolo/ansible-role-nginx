---

# push config files
- name: push nginx.conf
  template:
    src: "{{ nginx_conf_template }}"
    dest: "/etc/nginx/nginx.conf"
    mode: 0440
    owner: "root"
    group: "root"
  notify: restart nginx

# push additional files
- name: create dhparam directory
  file:
    path: "{{ nginx_ssl_dhparam | dirname }}"
    state: "directory"
    mode: 0750
    owner: "root"
    group: "root"
  notify: restart nginx
  when: nginx_hardening_enabled

- name: push nginx dhparam
  copy:
    content: "{{ nginx_ssl_dhparam_content }}"
    dest: "{{ nginx_ssl_dhparam }}"
    mode: 0440
    owner: "root"
    group: "root"
  notify: restart nginx
  when: nginx_hardening_enabled

# push conf.d files
- name: push additional configs to conf.d
  template:
    src: "vhost.conf.j2"
    dest: "/etc/nginx/conf.d/{{ item.key }}"
    mode: 0440
    owner: "root"
    group: "root"
  register: pushed_nginx_configs
  with_dict: "{{ nginx_confd }}"
  notify: restart nginx

# flatten and map the results into simple list
# unchanged files have attribute dest, changed have attribute path
- set_fact:
    managed_nginx_config_files: "{{ pushed_nginx_configs.results|selectattr('dest', 'string')|map(attribute='dest')|list + pushed_nginx_configs.results|selectattr('path', 'string')|map(attribute='path')|select|list }}"
  when: pushed_nginx_configs

- name: get list of existing configs
  shell: "ls -1 /etc/nginx/conf.d/*"
  register: all_nginx_config_files
  changed_when: false

- name: deleting outdated configs in conf.d
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ all_nginx_config_files.stdout_lines }}"
  when: item not in managed_nginx_config_files
  notify:
    - restart nginx

# http basic auth deploy
- name: create htpasswd directories
  file:
    path: "{{ item.path | dirname }}"
    state: "directory"
    mode: 0750
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
  with_items: "{{ nginx_htpasswd }}"
  no_log: true
  when: nginx_htpasswd_enabled

- name: create htpasswd files
  htpasswd:
    name: "{{ item.1.name }}"
    password: "{{ item.1.password }}"
    path: "{{ item.0.path }}"
    crypt_scheme: "apr_md5_crypt"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: 0440
  with_subelements:
    - "{{ nginx_htpasswd }}"
    - "users"
  when: nginx_htpasswd_enabled
  no_log: true

# push tls certs
- name: create tls cert directories
  file:
    path: "{{ item.cert_path | dirname }}"
    state: "directory"
    mode: 0500
    owner: "root"
    group: "root"
  notify: restart nginx
  with_items:
    - "{{ nginx_tlscerts }}"
  when: nginx_tlscerts_enabled
  no_log: true

- name: create tls key directories
  file:
    path: "{{ item.key_path | dirname }}"
    state: "directory"
    mode: 0500
    owner: "root"
    group: "root"
  notify: restart nginx
  with_items:
    - "{{ nginx_tlscerts }}"
  when: nginx_tlscerts_enabled
  no_log: true

- name: push tls certs
  copy:
    content: "{{ item.cert_content }}"
    dest: "{{ item.cert_path }}"
    mode: 0400
    owner: "root"
    group: "root"
  notify: restart nginx
  with_items:
    - "{{ nginx_tlscerts }}"
  when: nginx_tlscerts_enabled
  no_log: true

- name: push tls keys
  copy:
    content: "{{ item.key_content }}"
    dest: "{{ item.key_path }}"
    mode: 0400
    owner: "root"
    group: "root"
  notify: restart nginx
  with_items:
    - "{{ nginx_tlscerts }}"
  when: nginx_tlscerts_enabled
  no_log: true
